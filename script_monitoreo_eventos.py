#!/usr/bin/env python3
"""
Script para generar una campa√±a y monitorear eventos en tiempo real
Demuestra el flujo autom√°tico de eventos en el sistema de microservicios
"""

import requests
import time
import subprocess
import threading
import signal
import sys
import json
from datetime import datetime

# Configuraci√≥n
MARKETING_URL = "http://localhost:8003"
CONVERSIONES_URL = "http://localhost:8002"
AFILIADOS_URL = "http://localhost:8001"

def log_evento(mensaje):
    """Log con timestamp"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{timestamp}] {mensaje}")

def crear_campana():
    """Crear una nueva campa√±a"""
    log_evento("üöÄ Creando nueva campa√±a...")
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    campana_data = {
        "nombre": f"Campa√±a Monitor Eventos {timestamp}",
        "descripcion": f"Campa√±a para monitoreo de eventos - {timestamp}",
        "comision": 15.5,
        "presupuesto": 12000.0
    }
    
    try:
        response = requests.post(f"{MARKETING_URL}/campanas", json=campana_data, timeout=10)
        if response.status_code in [200, 201]:
            campana = response.json()
            log_evento(f"‚úÖ Campa√±a creada exitosamente:")
            log_evento(f"   - ID: {campana.get('id', 'N/A')}")
            log_evento(f"   - Nombre: {campana.get('nombre', 'N/A')}")
            log_evento(f"   - Comisi√≥n: {campana.get('comision', 'N/A')}%")
            log_evento(f"   - Presupuesto: ${campana.get('presupuesto', 'N/A')}")
            return campana
        else:
            log_evento(f"‚ùå Error al crear campa√±a: {response.status_code}")
            log_evento(f"   Respuesta: {response.text}")
            return None
    except Exception as e:
        log_evento(f"‚ùå Error de conexi√≥n al crear campa√±a: {str(e)}")
        return None

def monitorear_topico(topico, duracion=30):
    """Monitorear un t√≥pico espec√≠fico por un tiempo determinado"""
    def monitor():
        log_evento(f"üëÅÔ∏è  Iniciando monitoreo del t√≥pico: {topico}")
        cmd = [
            "docker", "exec", "-i", "alpes-pulsar",
            "bin/pulsar-client", "consume",
            f"persistent://public/default/{topico}",
            "-s", f"monitor-{topico}-{int(time.time())}",
            "-p", "Earliest",
            "-n", "0"  # Consume indefinidamente
        ]
        
        try:
            process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                bufsize=1,
                universal_newlines=True
            )
            
            start_time = time.time()
            eventos_encontrados = 0
            
            while time.time() - start_time < duracion:
                if process.poll() is not None:
                    break
                    
                try:
                    line = process.stdout.readline()
                    if line:
                        line = line.strip()
                        if "key:" in line or "properties:" in line or "value:" in line:
                            eventos_encontrados += 1
                            timestamp = datetime.now().strftime("%H:%M:%S")
                            log_evento(f"üì® [{topico}] Evento #{eventos_encontrados} detectado ({timestamp})")
                            log_evento(f"   üí¨ {line}")
                        elif "INFO" in line and "Connected" in line:
                            log_evento(f"üîó [{topico}] Conectado al t√≥pico")
                        elif "subscrib" in line.lower():
                            log_evento(f"üì• [{topico}] Suscripci√≥n establecida")
                except:
                    continue
            
            process.terminate()
            log_evento(f"‚èπÔ∏è  [{topico}] Monitoreo finalizado - {eventos_encontrados} eventos detectados")
            
        except Exception as e:
            log_evento(f"‚ùå Error monitoreando {topico}: {str(e)}")
    
    thread = threading.Thread(target=monitor, daemon=True)
    thread.start()
    return thread

def verificar_microservicios():
    """Verificar que todos los microservicios est√©n activos"""
    log_evento("üîç Verificando estado de microservicios...")
    
    servicios = [
        ("Marketing", MARKETING_URL),
        ("Conversiones", CONVERSIONES_URL),
        ("Afiliados", AFILIADOS_URL)
    ]
    
    activos = 0
    for nombre, url in servicios:
        try:
            response = requests.get(f"{url}/health", timeout=5)
            if response.status_code == 200:
                log_evento(f"‚úÖ {nombre}: ACTIVO")
                activos += 1
            else:
                log_evento(f"‚ö†Ô∏è  {nombre}: Respuesta inesperada ({response.status_code})")
        except Exception as e:
            log_evento(f"‚ùå {nombre}: NO DISPONIBLE ({str(e)})")
    
    return activos == len(servicios)

def main():
    """Funci√≥n principal"""
    log_evento("=" * 60)
    log_evento("üéØ MONITOR DE EVENTOS - ALPES PARTNER")
    log_evento("   Generaci√≥n de campa√±a y monitoreo autom√°tico")
    log_evento("=" * 60)
    
    # Verificar microservicios
    if not verificar_microservicios():
        log_evento("‚ùå No todos los microservicios est√°n disponibles")
        log_evento("üí° Aseg√∫rate de ejecutar: docker-compose up -d")
        return
    
    log_evento("‚úÖ Todos los microservicios est√°n activos")
    log_evento("")
    
    # Iniciar monitoreo de todos los t√≥picos
    log_evento("üé¨ Iniciando monitoreo de eventos...")
    topicos = ["marketing.eventos", "conversiones.eventos", "afiliados.eventos", "comisiones.eventos"]
    
    threads = []
    for topico in topicos:
        thread = monitorear_topico(topico, duracion=45)
        threads.append(thread)
        time.sleep(1)  # Peque√±a pausa entre inicializaciones
    
    log_evento("")
    log_evento("‚è±Ô∏è  Esperando 5 segundos para estabilizar monitoreo...")
    time.sleep(5)
    
    # Crear campa√±a (esto deber√≠a disparar los eventos autom√°ticamente)
    log_evento("")
    campana = crear_campana()
    
    if campana:
        log_evento("")
        log_evento("üîÑ Flujo autom√°tico iniciado! Los eventos deber√≠an aparecer en:")
        log_evento("   1Ô∏è‚É£  marketing.eventos ‚Üí CampanaCreada")
        log_evento("   2Ô∏è‚É£  conversiones.eventos ‚Üí ConversionDetectada") 
        log_evento("   3Ô∏è‚É£  afiliados.eventos ‚Üí AfiliadoRegistrado")
        log_evento("   4Ô∏è‚É£  comisiones.eventos ‚Üí ComisionCalculada")
        log_evento("")
        log_evento("üëÄ Monitoreando eventos por 40 segundos m√°s...")
        log_evento("   (Presiona Ctrl+C para detener)")
        
        try:
            time.sleep(40)
        except KeyboardInterrupt:
            log_evento("\n‚èπÔ∏è  Monitoreo interrumpido por el usuario")
    else:
        log_evento("‚ùå No se pudo crear la campa√±a, deteniendo monitoreo...")
    
    log_evento("")
    log_evento("üèÅ Monitoreo finalizado")
    log_evento("=" * 60)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        log_evento("\nüëã Monitoreo cancelado por el usuario")
        sys.exit(0)
    except Exception as e:
        log_evento(f"‚ùå Error inesperado: {str(e)}")
        sys.exit(1)